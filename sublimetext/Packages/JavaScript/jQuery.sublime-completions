/**
 * Inherited from AndyJS JavaScript + jQuery https://github.com/agibsonsw/AndyJS
 * Modified & enhanced by Thanh Tran
 */
{
	"scope": "source.js -string -comment -constant",
	"completions": [
		"jQuery",
		"context",
		"jquery",   /* version number */

		{ "trigger": "jQuery()", "contents": "jQuery(${1})" },
		{ "trigger": "callback", "contents": "function ($1) {\n\t$2\n}" },    /* anonymous function */
		{ "trigger": "handler", "contents": "function ($1) {\n\t$2\n}" },

		{ "trigger": "add()\tjQuery", "contents": "add(${1:selector}${2:[, context]})" },
		{ "trigger": "addClass()\tjQuery", "contents": "addClass(${1:classname_or_fn})" },
		{ "trigger": "after()\tjQuery", "contents": "after(${1:contents_or_fn})" },
		{ "trigger": "ajaxComplete()\tjQuery", "contents": "ajaxComplete(${1:handler})" },
		{ "trigger": "ajaxError()\tjQuery", "contents": "ajaxError(${1:handler})" },
		{ "trigger": "ajaxSend()\tjQuery", "contents": "ajaxSend(${1:handler})" },
		{ "trigger": "ajaxStart()\tjQuery", "contents": "ajaxStart(${1:handler})" },
		{ "trigger": "ajaxStop()\tjQuery", "contents": "ajaxStop(${1:handler})" },
		{ "trigger": "ajaxSuccess()\tjQuery", "contents": "ajaxSuccess(${1:handler})" },
		{ "trigger": "andSelf()\tjQuery", "contents": "andSelf()" },
		{ "trigger": "animate(duration)\tjQuery", "contents": "animate(${1:properties}${2:[, duration]}${3:[, easing]}${4:[, complete]})" },
		{ "trigger": "animate(options)\tjQuery", "contents": "animate(${1:properties}, ${2:options})" },
		{ "trigger": "append()\tjQuery", "contents": "append(${1:contents_or_fn})" },
		{ "trigger": "appendTo()\tjQuery", "contents": "appendTo(${1:target})" },
		{ "trigger": "attr()\tjQuery", "contents": "attr(${1:attributeName}${2:[, value]})" },
		{ "trigger": "before()\tjQuery", "contents": "before(${1:contents_or_fn})" },
		{ "trigger": "bind(events)\tjQuery", "contents": "bind(${1:events})" },
		{ "trigger": "bind()\tjQuery", "contents": "bind(${1:eventType}${2:[, eventData]}${3:[, preventBubble_or_fn]})" },
		{ "trigger": "blur()\tjQuery", "contents": "blur()" },
		{ "trigger": "blur(handler)\tjQuery", "contents": "blur(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "change()\tjQuery", "contents": "change()" },
		{ "trigger": "change(handler)\tjQuery", "contents": "change(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "children()\tjQuery", "contents": "children(${1:[selector]})" },
		{ "trigger": "clearQueue()\tjQuery", "contents": "clearQueue(${1:[queueName]})" },
		{ "trigger": "click()\tjQuery", "contents": "click()" },
		{ "trigger": "click(handler)\tjQuery", "contents": "click(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "clone()\tjQuery", "contents": "clone(${1:[withDataAndEvents]}${2:[, deep]})" },
		{ "trigger": "closest()\tjQuery", "contents": "closest(${1:selectors}${2:[, context]})" },
		{ "trigger": "contents()\tjQuery", "contents": "contents()" },
		{ "trigger": "css()\tjQuery", "contents": "css(${1:propertyName}${2:[, value]})" },
		{ "trigger": "data(key, value)\tjQuery", "contents": "data(${1:key}${2:[, value]})" },
		{ "trigger": "data(obj)\tjQuery", "contents": "data(${1})" },
		{ "trigger": "dblclick()\tjQuery", "contents": "dblclick()" },
		{ "trigger": "dblclick(handler)\tjQuery", "contents": "dblclick(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "delay()\tjQuery", "contents": "delay(${1:duration}${2:[, queueName]})" },
		{ "trigger": "delegate()\tjQuery", "contents": "delegate(${1:selector}, ${2:events})" },
		{ "trigger": "dequeue()\tjQuery", "contents": "dequeue(${1:[queueName]})" },
		{ "trigger": "detach()\tjQuery", "contents": "detach(${1:[selector]})" },
		{ "trigger": "die()\tjQuery", "contents": "die()" },
		{ "trigger": "die(event)\tjQuery", "contents": "die(${1:eventType}${2:[, handler]})" },
		{ "trigger": "each()\tjQuery", "contents": "each(function (index, elem) {\n\t$1\n})" },
		{ "trigger": "empty()\tjQuery", "contents": "empty()" },
		{ "trigger": "end()\tjQuery", "contents": "end()" },
		{ "trigger": "eq()\tjQuery", "contents": "eq(${1:index})" },
		{ "trigger": "error()\tjQuery", "contents": "error(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "fadeIn()\tjQuery", "contents": "fadeIn(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "fadeOut()\tjQuery", "contents": "fadeOut(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "fadeTo()\tjQuery", "contents": "fadeTo(${1:duration}, ${2:opacity}${3:[, easing]}${4:[, callback]})" },
		{ "trigger": "fadeToggle()\tjQuery", "contents": "fadeToggle(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "filter()\tjQuery", "contents": "filter(${1:selector_or_fn})" },
		{ "trigger": "find()\tjQuery", "contents": "find(${1:selector})" },
		{ "trigger": "first()\tjQuery", "contents": "first()" },
		{ "trigger": "focus()\tjQuery", "contents": "focus()" },
		{ "trigger": "focus(handler)\tjQuery", "contents": "focus(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "focusin()\tjQuery", "contents": "focusin(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "focusout()\tjQuery", "contents": "focusout(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "get()\tjQuery", "contents": "get(${1:[index]})" },
		{ "trigger": "has()\tjQuery", "contents": "has(${1:selector/contained})" },
		{ "trigger": "hasClass()\tjQuery", "contents": "hasClass(${1:className})" },
		{ "trigger": "height()\tjQuery", "contents": "height()" },
		{ "trigger": "height(value)\tjQuery", "contents": "height(${1:value_or_fn})" },
		{ "trigger": "hide()\tjQuery", "contents": "hide()" },
		{ "trigger": "hide(duration)\tjQuery", "contents": "hide(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "hover()\tjQuery", "contents": "hover(${1:handlers_inout})" },
		{ "trigger": "html()\tjQuery", "contents": "html(${1:[htmlString]})" },
		{ "trigger": "html(fn)\tjQuery", "contents": "html(function (index, oldhtml) {\n\t$1\n})" },
		{ "trigger": "index()\tjQuery", "contents": "index(${1:[selector]})" },
		{ "trigger": "innerHeight()\tjQuery", "contents": "innerHeight()" },
		{ "trigger": "innerWidth()\tjQuery", "contents": "innerWidth()" },
		{ "trigger": "insertAfter()\tjQuery", "contents": "insertAfter(${1:target})" },
		{ "trigger": "insertBefore()\tjQuery", "contents": "insertBefore(${1:target})" },
		{ "trigger": "is()\tjQuery", "contents": "is(${1:selector_or_fn})" },
		{ "trigger": "keydown()\tjQuery", "contents": "keydown()" },
		{ "trigger": "keydown(handler)\tjQuery", "contents": "keydown(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "keypress()\tjQuery", "contents": "keypress()" },
		{ "trigger": "keypress(handler)\tjQuery", "contents": "keypress(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "keyup()\tjQuery", "contents": "keyup()" },
		{ "trigger": "keyup(handler)\tjQuery", "contents": "keyup(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "last()\tjQuery", "contents": "last()" },
		{ "trigger": "live()\tjQuery (depr.)", "contents": "live($1)" },
		{ "trigger": "load(handler)\tjQuery", "contents": "load(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "load(url)\tjQuery", "contents": "load(${1:url}${2:[, data]}${3:[, complete(responseText, textStatus, XMLHttpRequest)]})" },
		{ "trigger": "map()\tjQuery", "contents": "map(function (index, domElement) {\n\t$1\n})" },
		{ "trigger": "mousedown()\tjQuery", "contents": "mousedown()" },
		{ "trigger": "mousedown(handler)\tjQuery", "contents": "mousedown(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "mouseenter()\tjQuery", "contents": "mouseenter()" },
		{ "trigger": "mouseenter(handler)\tjQuery", "contents": "mouseenter(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "mouseleave()\tjQuery", "contents": "mouseleave()" },
		{ "trigger": "mouseleave(handler)\tjQuery", "contents": "mouseleave(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "mousemove()\tjQuery", "contents": "mousemove()" },
		{ "trigger": "mousemove(handler)\tjQuery", "contents": "mousemove(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "mouseout()\tjQuery", "contents": "mouseout()" },
		{ "trigger": "mouseout(handler)\tjQuery", "contents": "mouseout(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "mouseover()\tjQuery", "contents": "mouseover()" },
		{ "trigger": "mouseover(handler)\tjQuery", "contents": "mouseover(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "mouseup()\tjQuery", "contents": "mouseup()" },
		{ "trigger": "mouseup(handler)\tjQuery", "contents": "mouseup(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "next()\tjQuery", "contents": "next(${1:[selector]})" },
		{ "trigger": "nextAll()\tjQuery", "contents": "nextAll(${1:[selector]})" },
		{ "trigger": "nextUntil()\tjQuery", "contents": "nextUntil(${1:[selector]}${2:[, filter]})" },
		{ "trigger": "not()\tjQuery", "contents": "not(${1:selector_or_fn})" },
		{ "trigger": "off()\tjQuery", "contents": "off($1)" },
		{ "trigger": "offset()\tjQuery", "contents": "offset(${1:[coords_or_fn]})" },
		{ "trigger": "offsetParent()\tjQuery", "contents": "offsetParent()" },
		{ "trigger": "on()\tjQuery", "contents": "on($1)" },
		{ "trigger": "one()\tjQuery", "contents": "one($1)" },
		{ "trigger": "outerHeight()\tjQuery", "contents": "outerHeight(${1:[includeMargin]})" },
		{ "trigger": "outerWidth()\tjQuery", "contents": "outerWidth(${1:[includeMargin]})" },
		{ "trigger": "parent()\tjQuery", "contents": "parent(${1:[selector]})" },
		{ "trigger": "parents()\tjQuery", "contents": "parents(${1:[selector]})" },
		{ "trigger": "parentsUntil()\tjQuery", "contents": "parentsUntil(${1:[selector]}${2:[, filter]})" },
		{ "trigger": "position()\tjQuery", "contents": "position()" },
		{ "trigger": "prepend()\tjQuery", "contents": "prepend(${1:contents_or_fn})" },
		{ "trigger": "prependTo()\tjQuery", "contents": "prependTo(${1:target})" },
		{ "trigger": "prev()\tjQuery", "contents": "prev(${1:[selector]})" },
		{ "trigger": "prevAll()\tjQuery", "contents": "prevAll(${1:[selector]})" },
		{ "trigger": "prevUntil()\tjQuery", "contents": "prevUntil(${1:[selector]}${2:[, filter]})" },
		{ "trigger": "promise()\tjQuery", "contents": "promise(${1:[type]}${2:[, target]})" },
		{ "trigger": "prop()\tjQuery", "contents": "prop(${1:propertyName_or_map}${2:[, value_or_fn]})" },
		{ "trigger": "pushStack()\tjQuery", "contents": "pushStack(${1:elements}${2:[, name]}${3:[, arguments]})" },
		{ "trigger": "queue()\tjQuery", "contents": "queue(${1:[queueName]}${2:[, newQueue_or_fn]})" },
		{ "trigger": "ready()\tjQuery", "contents": "ready(${1:handler})" },
		{ "trigger": "remove()\tjQuery", "contents": "remove(${1:[selector]})" },
		{ "trigger": "removeAttr()\tjQuery", "contents": "removeAttr(${1:attributeName})" },
		{ "trigger": "removeClass()\tjQuery", "contents": "removeClass(${1:[className_or_fn]})" },
		{ "trigger": "removeData()\tjQuery", "contents": "removeData(${1:[name_or_list]})" },
		{ "trigger": "removeProp()\tjQuery", "contents": "removeProp(${1:propertyName})" },
		{ "trigger": "replaceAll()\tjQuery", "contents": "replaceAll(${1:target})" },
		{ "trigger": "replaceWith()\tjQuery", "contents": "replaceWith(${1:newContent_or_fn})" },
		{ "trigger": "resize()\tjQuery", "contents": "resize()" },
		{ "trigger": "resize(handler)\tjQuery", "contents": "resize(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "scroll()\tjQuery", "contents": "scroll()" },
		{ "trigger": "scroll(handler)\tjQuery", "contents": "scroll(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "scrollLeft()\tjQuery", "contents": "scrollLeft(${1:[value]})" },
		{ "trigger": "scrollTop()\tjQuery", "contents": "scrollTop(${1:[value]})" },
		{ "trigger": "select()\tjQuery", "contents": "select()" },
		{ "trigger": "select(handler)\tjQuery", "contents": "select(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "serialize()\tjQuery", "contents": "serialize()" },
		{ "trigger": "serializeArray()\tjQuery", "contents": "serializeArray()" },
		{ "trigger": "show()\tjQuery", "contents": "show()" },
		{ "trigger": "show(duration)\tjQuery", "contents": "show(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "siblings()\tjQuery", "contents": "siblings(${1:[selector]})" },
		{ "trigger": "size()\tjQuery", "contents": "size()" },
		{ "trigger": "slice()\tjQuery", "contents": "slice(${1:start}${2:[, end]})" },
		{ "trigger": "slideDown()\tjQuery", "contents": "slideDown(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "slideToggle()\tjQuery", "contents": "slideToggle(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "slideUp()\tjQuery", "contents": "slideUp(${1:[duration]}${2:[, easing]}${3:[, callback]})" },
		{ "trigger": "stop()\tjQuery", "contents": "stop(${1:[queue]}${2:[, clearQueue]}${3:[, jumpToEnd]})" },
		{ "trigger": "submit()\tjQuery", "contents": "submit()" },
		{ "trigger": "submit(handler)\tjQuery", "contents": "submit(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "text()\tjQuery", "contents": "text($1)" },
		{ "trigger": "toArray()\tjQuery", "contents": "toArray($1)" },
		{ "trigger": "toggle()\tjQuery", "contents": "toggle($1)" },
		{ "trigger": "toggleClass()\tjQuery", "contents": "toggleClass($1)" },
		{ "trigger": "trigger(event)\tjQuery", "contents": "trigger(${1:event})" },
		{ "trigger": "trigger(type)\tjQuery", "contents": "trigger(${1:eventType}${2:[, extraParameters]})" },
		{ "trigger": "triggerHandler()\tjQuery", "contents": "triggerHandler(${1:eventType}${2:[, extraParameters]})" },
		{ "trigger": "unbind()\tjQuery", "contents": "unbind($1)" },
		{ "trigger": "undelegate()\tjQuery", "contents": "undelegate($1)" },
		{ "trigger": "unload()\tjQuery", "contents": "unload(${1:[eventData, ]}${2:handler})" },
		{ "trigger": "unwrap()\tjQuery", "contents": "unwrap()" },
		{ "trigger": "val()\tjQuery", "contents": "val()" },
		{ "trigger": "val(value)\tjQuery", "contents": "val(${1:value_or_fn})" },
		{ "trigger": "width()\tjQuery", "contents": "width()" },
		{ "trigger": "width(value)\tjQuery", "contents": "width(${1:value_or_fn})" },
		{ "trigger": "wrap()\tjQuery", "contents": "wrap(${1:element_or_fn})" },
		{ "trigger": "wrapAll()\tjQuery", "contents": "wrapAll(${1:wrappingElement})" },
		{ "trigger": "wrapInner()\tjQuery", "contents": "wrapInner(${1:element_or_fn})" },

		{ "trigger": "ajax()\t$.", "contents": "ajax(${1:[url, ]}${2:[settings]})" },
		{ "trigger": "ajaxPrefilter()\t$.", "contents": "ajaxPrefilter($1)" },
		{ "trigger": "ajaxSetup()\t$.", "contents": "ajaxSetup(${1:options})" },
		{ "trigger": "boxModel\t$.deprecated ", "contents": "boxModel" },
		{ "trigger": "browser\t$.deprecated ", "contents": "browser" },
		{ "trigger": "Callbacks()\t$.", "contents": "Callbacks(${1:[flags]})" },
		{ "trigger": "contains()\t$.", "contents": "contains(${1:container}, ${2:contained})" },
		{ "trigger": "cssHooks\t$.", "contents": "cssHooks" },
		{ "trigger": "data()\t$.", "contents": "data(${1:element}${2:[, key]}${3:[, value]})" },
		{ "trigger": "dequeue()\t$.", "contents": "dequeue(${1:element}${2:[, queueName]})" },
		{ "trigger": "each()\t$.", "contents": "each(${1:collection}, ${2:callback(index, value)})" },
		{ "trigger": "error()\t$.", "contents": "error(${1:message})" },
		{ "trigger": "extend()\t$.", "contents": "extend(${1:[deep, ]}${2:target}${3:[, objects]})" },
		{ "trigger": "fx.interval\t$.", "contents": "fx.interval" },
		{ "trigger": "fx.off\t$.", "contents": "fx.off" },
		{ "trigger": "get()\t$.", "contents": "get(${1:url}${2:[, data]}${3:[, success(data, textStatus, jqXHR)]}${4:[, dataType]})" },
		{ "trigger": "getJSON()\t$.", "contents": "getJSON(${1:url}${2:[, data]}${3:[, success(data, textStatus, jqXHR)]})" },
		{ "trigger": "getScript()\t$.", "contents": "getScript(${1:url}${2:[, success(script, textStatus, jqXHR)]})" },
		{ "trigger": "globalEval()\t$.", "contents": "globalEval(${1:code})" },
		{ "trigger": "grep()\t$.", "contents": "grep(${1:array}, ${2:function(element, index)}${3:[, invert]})" },
		{ "trigger": "hasData()\t$.", "contents": "hasData(${1:element})" },
		{ "trigger": "holdReady()\t$.", "contents": "holdReady(${1:hold})" },
		{ "trigger": "inArray()\t$.", "contents": "inArray(${1:value}, ${2:array}${3:[, fromIndex]})" },
		{ "trigger": "isArray()\t$.", "contents": "isArray(${1:obj})" },
		{ "trigger": "isEmptyObject()\t$.", "contents": "isEmptyObject(${1:object})" },
		{ "trigger": "isFunction()\t$.", "contents": "isFunction(${1:obj})" },
		{ "trigger": "isNumeric()\t$.", "contents": "isNumeric(${1:value})" },
		{ "trigger": "isPlainObject()\t$.", "contents": "isPlainObject(${1:object})" },
		{ "trigger": "isWindow()\t$.", "contents": "isWindow(${1:obj})" },
		{ "trigger": "isXMLDoc()\t$.", "contents": "isXMLDoc(${1:node})" },
		{ "trigger": "makeArray()\t$.", "contents": "makeArray(${1:obj})" },
		{ "trigger": "map()\t$.", "contents": "map(${1:arrayOrObject}, ${2:callback(elementOrValue, indexOrKey)})" },
		{ "trigger": "merge()\t$.", "contents": "merge(${1:first}, ${2:second})" },
		{ "trigger": "noConflict()\t$.", "contents": "noConflict(${1:[removeAll]})" },
		{ "trigger": "noop()\t$.", "contents": "noop()" },
		{ "trigger": "now()\t$.", "contents": "now()" },
		{ "trigger": "param()\t$.", "contents": "param(${1:obj}${2:[, traditional]})" },
		{ "trigger": "parseJSON()\t$.", "contents": "parseJSON(${1:json})" },
		{ "trigger": "parseXML()\t$.", "contents": "parseXML(${1:data})" },
		{ "trigger": "post()\t$.", "contents": "post(${1:url}${2:[, data]}${3:[, success(data, textStatus, jqXHR)]}${4:[, dataType]})" },
		{ "trigger": "proxy()\t$.", "contents": "proxy(${1:function/context}, ${2:context/name})" },
		{ "trigger": "queue()\t$.", "contents": "queue(${1:element}${2:[, queueName]}${3:[, newQueue_or_fn]})" },
		{ "trigger": "removeData()\t$.", "contents": "removeData(${1:element}${2:[, name]})" },
		{ "trigger": "support\t$.", "contents": "support" },
		{ "trigger": "trim()\t$.", "contents": "trim(${1:str})" },
		{ "trigger": "type()\t$.", "contents": "type(${1:obj})" },
		{ "trigger": "unique()\t$.", "contents": "unique(${1:array})" },
		{ "trigger": "when()\t$.", "contents": "when(${1:deferreds})" },

		{ "trigger": "currentTarget\tjQ event", "contents": "currentTarget" },
		{ "trigger": "data\tjQ event", "contents": "data" },
		{ "trigger": "delegateTarget\tjQ event", "contents": "delegateTarget" },
		{ "trigger": "isDefaultPrevented()\tjQ event", "contents": "isDefaultPrevented()" },
		{ "trigger": "isImmediatePropagationStopped()\tjQ event", "contents": "isImmediatePropagationStopped()" },
		{ "trigger": "isPropagationStopped()\tjQ event", "contents": "isPropagationStopped()" },
		{ "trigger": "namespace\tjQ event", "contents": "namespace" },
		{ "trigger": "pageX\tjQ event", "contents": "pageX" },
		{ "trigger": "pageY\tjQ event", "contents": "pageY" },
		{ "trigger": "preventDefault()\tjQ event", "contents": "preventDefault()" },
		{ "trigger": "relatedTarget\tjQ event", "contents": "relatedTarget" },
		{ "trigger": "result\tjQ event", "contents": "result" },
		{ "trigger": "stopImmediatePropagation()\tjQ event", "contents": "stopImmediatePropagation()" },
		{ "trigger": "stopPropagation()\tjQ event", "contents": "stopPropagation()" },
		{ "trigger": "target\tjQ event", "contents": "target" },
		{ "trigger": "timeStamp\tjQ event", "contents": "timeStamp" },
		{ "trigger": "type\tjQ event", "contents": "type" },
		{ "trigger": "which\tjQ event", "contents": "which" },

		{ "trigger": "add()\tjQ callbacks", "contents": "add(${1:callbacks})" },
		{ "trigger": "disable()\tjQ callbacks", "contents": "disable()" },
		{ "trigger": "empty()\tjQ callbacks", "contents": "empty()" },
		{ "trigger": "fire()\tjQ callbacks", "contents": "fire(${1:arguments})" },
		{ "trigger": "fired()\tjQ callbacks", "contents": "fired()" },
		{ "trigger": "fireWith()\tjQ callbacks", "contents": "fireWith(${1:context}${2:[, args]})" },
		{ "trigger": "has()\tjQ callbacks", "contents": "has(${1:callback})" },
		{ "trigger": "lock()\tjQ callbacks", "contents": "lock()" },
		{ "trigger": "locked()\tjQ callbacks", "contents": "locked()" },
		{ "trigger": "remove()\tjQ callbacks", "contents": "remove(${1:callbacks})" },

		{ "trigger": "always()\tjQ deferred", "contents": "always(${1:alwaysCallbacks})" },
		{ "trigger": "done()\tjQ deferred", "contents": "done(${1:doneCallbacks})" },
		{ "trigger": "fail()\tjQ deferred", "contents": "fail(${1:failCallbacks})" },
		{ "trigger": "isRejected()\tjQ deferred", "contents": "isRejected()" },
		{ "trigger": "isResolved()\tjQ deferred", "contents": "isResolved()" },
		{ "trigger": "notify()\tjQ deferred", "contents": "notify(${1:args})" },
		{ "trigger": "notifyWith()\tjQ deferred", "contents": "notifyWith(${1:context}${2:[, args]})" },
		{ "trigger": "pipe()\tjQ deferred", "contents": "pipe(${1:[doneFilter]}${2:[, failFilter]}${3:[, progressFilter]})" },
		{ "trigger": "progress()\tjQ deferred", "contents": "progress(${1:progressCallbacks})" },
		{ "trigger": "promise()\tjQ deferred", "contents": "promise(${1:[target]})" },
		{ "trigger": "reject()\tjQ deferred", "contents": "reject(${1:args})" },
		{ "trigger": "rejectWith()\tjQ deferred", "contents": "rejectWith(${1:context}${2:[, args]})" },
		{ "trigger": "resolve()\tjQ deferred", "contents": "resolve(${1:args})" },
		{ "trigger": "resolveWith()\tjQ deferred", "contents": "resolveWith(${1:context}${2:[, args]})" },
		{ "trigger": "state()\tjQ deferred", "contents": "state()" },
		{ "trigger": "then()\tjQ deferred", "contents": "then(${1:doneCallbacks}, ${2:failCallbacks}${3:[, progressCallbacks]})$0" }
	]
}